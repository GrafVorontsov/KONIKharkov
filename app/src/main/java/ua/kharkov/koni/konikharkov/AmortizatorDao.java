package ua.kharkov.koni.konikharkov;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AMORTIZATORS".
*/
public class AmortizatorDao extends AbstractDao<Amortizator, Long> {

    public static final String TABLENAME = "AMORTIZATORS";

    /**
     * Properties of entity Amortizator.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Marka_name = new Property(1, String.class, "marka_name", false, "MARKA_NAME");
        public final static Property Model_name = new Property(2, String.class, "model_name", false, "MODEL_NAME");
        public final static Property Car_name = new Property(3, String.class, "car_name", false, "CAR_NAME");
        public final static Property Correction = new Property(4, String.class, "correction", false, "CORRECTION");
        public final static Property Year = new Property(5, String.class, "year", false, "YEAR");
        public final static Property Range = new Property(6, String.class, "range", false, "RANGE");
        public final static Property Install = new Property(7, String.class, "install", false, "INSTALL");
        public final static Property Art_number = new Property(8, String.class, "art_number", false, "ART_NUMBER");
        public final static Property Info = new Property(9, String.class, "info", false, "INFO");
        public final static Property Info_lowering = new Property(10, String.class, "info_lowering", false, "INFO_LOWERING");
        public final static Property Jpg = new Property(11, String.class, "jpg", false, "JPG");
        public final static Property Pdf = new Property(12, String.class, "pdf", false, "PDF");
        public final static Property Status = new Property(13, String.class, "status", false, "STATUS");
        public final static Property Price_euro = new Property(14, String.class, "price_euro", false, "PRICE_EURO");
    }

    private DaoSession daoSession;


    public AmortizatorDao(DaoConfig config) {
        super(config);
    }
    
    public AmortizatorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AMORTIZATORS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MARKA_NAME\" TEXT," + // 1: marka_name
                "\"MODEL_NAME\" TEXT," + // 2: model_name
                "\"CAR_NAME\" TEXT," + // 3: car_name
                "\"CORRECTION\" TEXT," + // 4: correction
                "\"YEAR\" TEXT NOT NULL ," + // 5: year
                "\"RANGE\" TEXT NOT NULL ," + // 6: range
                "\"INSTALL\" TEXT NOT NULL ," + // 7: install
                "\"ART_NUMBER\" TEXT NOT NULL ," + // 8: art_number
                "\"INFO\" TEXT," + // 9: info
                "\"INFO_LOWERING\" TEXT," + // 10: info_lowering
                "\"JPG\" TEXT," + // 11: jpg
                "\"PDF\" TEXT," + // 12: pdf
                "\"STATUS\" TEXT NOT NULL ," + // 13: status
                "\"PRICE_EURO\" TEXT NOT NULL );"); // 14: price_euro
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AMORTIZATORS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Amortizator entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String marka_name = entity.getMarka_name();
        if (marka_name != null) {
            stmt.bindString(2, marka_name);
        }
 
        String model_name = entity.getModel_name();
        if (model_name != null) {
            stmt.bindString(3, model_name);
        }
 
        String car_name = entity.getCar_name();
        if (car_name != null) {
            stmt.bindString(4, car_name);
        }
 
        String correction = entity.getCorrection();
        if (correction != null) {
            stmt.bindString(5, correction);
        }
        stmt.bindString(6, entity.getYear());
        stmt.bindString(7, entity.getRange());
        stmt.bindString(8, entity.getInstall());
        stmt.bindString(9, entity.getArt_number());
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(10, info);
        }
 
        String info_lowering = entity.getInfo_lowering();
        if (info_lowering != null) {
            stmt.bindString(11, info_lowering);
        }
 
        String jpg = entity.getJpg();
        if (jpg != null) {
            stmt.bindString(12, jpg);
        }
 
        String pdf = entity.getPdf();
        if (pdf != null) {
            stmt.bindString(13, pdf);
        }
        stmt.bindString(14, entity.getStatus());
        stmt.bindString(15, entity.getPrice_euro());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Amortizator entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String marka_name = entity.getMarka_name();
        if (marka_name != null) {
            stmt.bindString(2, marka_name);
        }
 
        String model_name = entity.getModel_name();
        if (model_name != null) {
            stmt.bindString(3, model_name);
        }
 
        String car_name = entity.getCar_name();
        if (car_name != null) {
            stmt.bindString(4, car_name);
        }
 
        String correction = entity.getCorrection();
        if (correction != null) {
            stmt.bindString(5, correction);
        }
        stmt.bindString(6, entity.getYear());
        stmt.bindString(7, entity.getRange());
        stmt.bindString(8, entity.getInstall());
        stmt.bindString(9, entity.getArt_number());
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(10, info);
        }
 
        String info_lowering = entity.getInfo_lowering();
        if (info_lowering != null) {
            stmt.bindString(11, info_lowering);
        }
 
        String jpg = entity.getJpg();
        if (jpg != null) {
            stmt.bindString(12, jpg);
        }
 
        String pdf = entity.getPdf();
        if (pdf != null) {
            stmt.bindString(13, pdf);
        }
        stmt.bindString(14, entity.getStatus());
        stmt.bindString(15, entity.getPrice_euro());
    }

    @Override
    protected final void attachEntity(Amortizator entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Amortizator readEntity(Cursor cursor, int offset) {
        Amortizator entity = new Amortizator( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // marka_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // model_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // car_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // correction
            cursor.getString(offset + 5), // year
            cursor.getString(offset + 6), // range
            cursor.getString(offset + 7), // install
            cursor.getString(offset + 8), // art_number
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // info
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // info_lowering
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // jpg
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // pdf
            cursor.getString(offset + 13), // status
            cursor.getString(offset + 14) // price_euro
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Amortizator entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMarka_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setModel_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCar_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCorrection(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setYear(cursor.getString(offset + 5));
        entity.setRange(cursor.getString(offset + 6));
        entity.setInstall(cursor.getString(offset + 7));
        entity.setArt_number(cursor.getString(offset + 8));
        entity.setInfo(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setInfo_lowering(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setJpg(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPdf(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setStatus(cursor.getString(offset + 13));
        entity.setPrice_euro(cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Amortizator entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Amortizator entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Amortizator entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
